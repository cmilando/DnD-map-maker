get_names(g, v)
}
get_neighbors(g, '51',1)
get_neighbors(g, '51',2)
get_neighbors <- function(g, v, d) {
print(d)
print(get_neighbors(g, v, d - 1))
if(d > 1) return(get_neighbors(g, v, d - 1))
get_names(g, v)
}
get_neighbors(g, '51',2)
get_neighbors <- function(g, v, d) {
print(d)
if(d == 0) return()
if(d > 1) print(get_neighbors(g, v, d - 1))
if(d > 1) return(get_neighbors(g, v, d - 1))
get_names(g, v)
}
get_neighbors(g, '51',2)
get_neighbors <- function(g, v, d) {
print(d)
if(d == 0) return()
if(d > 1) get_names(g, get_neighbors(g, v, d - 1))
}
get_neighbors(g, '51',2)
get_neighbors <- function(g, v, d) {
print(d)
if(d == 0) return()
if(d > 1) print(get_neighbors(g, v, d - 1))
if(d > 1) return(get_neighbors(g, v, d - 1))
get_names(g, get_names(g, v))
}
get_neighbors(g, '51',2)
get_neighbors(g, '51',1)
get_neighbors <- function(g, v, d) {
print(d)
if(d == 0) return()
if(d > 1) return(get_neighbors(g, v, d - 1))
print(get_names(g,v))
get_names(g, get_names(g, v))
}
get_neighbors(g, '51',1)
get_neighbors <- function(g, v, d) {
print(d)
if(d == 0) return()
if(d > 1) return(get_neighbors(g, v, d - 1))
print(get_names(g,v))
#get_names(g, get_names(g, v))
}
get_neighbors(g, '51',1)
get_neighbors(g, '51',2)
get_neighbors <- function(g, v, d) {
print(d)
if(d == 0) return()
if(d > 1) return(get_names(g, get_names(g, v)))
# print(get_names(g,v))
# get_names(g, get_names(g, v))
}
get_neighbors(g, '51',2)
get_neighbors(g, '51',1)
get_neighbors <- function(g, v, d) {
print(d)
if(d == 0) return()
if(d > 1) return(get_names(g, get_names(g, v)))
if(d == 1) return(get_names(g,v))
}
get_neighbors(g, '51',1)
get_neighbors(g, '51',2)
get_neighbors <- function(g, v, d) {
print(d)
if(d == 0) return()
if(d >= 1) return(get_neighbors(g, get_names(g, v),1))
}
get_neighbors(g, '51',2)
get_neighbors <- function(g, v, d) {
print(d)
if(d == 0) return()
if(d >= 1) return(get_neighbors(g, get_names(g, v),d - 1))
}
get_neighbors(g, '51',2)
get_neighbors <- function(g, v, d) {
print(d)
if(d == 0) return()
if(d >= 1) print(get_neighbors(g, get_names(g, v),d - 1))
}
get_neighbors(g, '51',2)
get_neighbors <- function(g, v, d) {
print(d)
if(d == 0) return()
if(d >= 1) print(get_neighbors(g, get_names(g, v),d - 1))
print(get_names(g, v))
}
get_neighbors(g, '51',2)
get_neighbors <- function(g, v, d) {
print(d)
if(d == 0) return()
if(d >= 1) return(get_neighbors(g, get_names(g, v),d - 1))
print(get_names(g, v))
}
get_neighbors(g, '51',2)
get_neighbors <- function(g, v, d) {
print(d)
if(d == 0) return()
if(d >= 1) print(get_neighbors(g, get_names(g, v),d - 1))
print(get_names(g, v))
}
get_neighbors <- function(g, v, d) {
print(d)
if(d == 0) return()
if(d >= 1) get_neighbors(g, get_names(g, v),d - 1)
get_names(g, v)
}
get_neighbors(g, '51',2)
get_neighbors <- function(g, v, d) {
print(d)
if(d == 0) return()
if(d >= 1) print(get_neighbors(g, get_names(g, v),d - 1))
get_names(g, v)
}
get_neighbors(g, '51',2)
get_neighbors <- function(g, v, d) {
if(d == 0) return()
if(d >= 1) print(get_neighbors(g, get_names(g, v),d - 1))
get_names(g, v)
}
get_neighbors(g, '51',2)
get_neighbors(g, '173',2)
get_neighbors(g, '173',1)
get_neighbors <- function(g, v, d) {
raw <- get_neighbors_recursive(g, v, d)
return(raw)
}
get_names <- function(g, x) unname(unlist(lapply(adjacent_vertices(g,x),names)))
get_neighbors_recursive <- function(g, v, d) {
if(d == 0) return()
if(d >= 1) print(get_neighbors(g, get_names(g, v),d - 1))
get_names(g, v)
}
get_neighbors <- function(g, v, d) {
raw <- get_neighbors_recursive(g, v, d)
return(raw)
}
get_neighbors(g, '51',2)
raw <- get_neighbors(g,'51',2)
rawr
raw
get_neighbors_recursive <- function(g, v, d) {
if(d > 0) {
get_neighbors(g, get_names(g, v),d - 1))
get_names(g, v)
}
}
get_neighbors <- function(g, v, d) {
raw <- get_neighbors_recursive(g, v, d)
return(raw)
}
get_neighbors_recursive <- function(g, v, d) {
if(d > 0) {
get_neighbors(g, get_names(g, v),d - 1)
get_names(g, v)
}
}
get_neighbors_recursive <- function(g, v, d) {
if(d > 0) {
get_neighbors_recursive(g, get_names(g, v),d - 1)
get_names(g, v)
}
}
get_neighbors_recursive(g, '51', 1)
get_neighbors_recursive(g, '51', 2)
get_neighbors_recursive <- function(g, v, d) {
if(d > 0) {
return(list(
get_neighbors_recursive(g, get_names(g, v),d - 1),
get_names(g, v)
))
}
}
get_neighbors_recursive(g, '51', 2)
get_neighbors_recursive(g, '51', 1)
unlist(get_neighbors_recursive(g, '51', 1))
unlist(get_neighbors_recursive(g, '51', 2))
unique(unlist(get_neighbors_recursive(g, '51', 2)))
get_names <- function(g, x) unname(unlist(lapply(adjacent_vertices(g,x),names)))
get_neighbors_recursive <- function(g, v, d) {
if(d > 0) {
return(list(
get_neighbors_recursive(g, get_names(g, v),d - 1),
get_names(g, v)
))
}
}
get_neighbors <- function(g, v, d) {
unique(unlist(get_neighbors_recursive(g, v, d)))
}
get_neighbors(g, '51',2)
get_neighbors(g, '173',1)
get_neighbors <- function(g, v, d) {
xx <- unique(unlist(get_neighbors_recursive(g, v, d)))
if(d == 1) return(c(v,xx))
}
get_neighbors(g, '173',1)
get_neighbors(g, '51',2)
get_neighbors <- function(g, v, d) {
xx <- unique(unlist(get_neighbors_recursive(g, v, d)))
if(d == 1) return(c(v,xx))
return(xx)
}
get_neighbors(g, '51',2)
get_neighbors(g, '173',1)
x11()
get_neighbors(g, '51',2)
plot(g)
x11()
plot(g)
get_neighbors(g, '221',1)
get_neighbors(g, '221',2)
map_colors
tsv_melt$value[map_colors]
tsv_melt$value
map_colors[tsv_melt$value]
tsv_melt$fill <- map_colors[tsv_melt$value]
ggplot() + theme_bw() +
geom_tile(data = tsv_melt,
mapping = aes(x = x, y = -y,fill = fill),
color = 'black') +
geom_text(data = tsv_melt,
mapping = aes(x = x, y = -y, label = ID))
ggplot() + theme_bw() +
geom_tile(data = tsv_melt,
mapping = aes_string(x = x, y = -y,fill = fill),
color = 'black') +
geom_text(data = tsv_melt,
mapping = aes(x = x, y = -y, label = ID))
ggplot() + theme_bw() +
geom_tile(data = tsv_melt,
mapping = aes(x = x, y = -y,fill = shQuote(fill)),
color = 'black') +
geom_text(data = tsv_melt,
mapping = aes(x = x, y = -y, label = ID))
fname <- "../The Dungeon of Demonic Annihilation 01 (tsv).txt"
tsv <- read.csv(fname, sep = "\t", colClasses = "character")
tsv <- rbind("",tsv)
colnames(tsv) <- 1:ncol(tsv)
tsv$y <- 1:nrow(tsv)
tsv_melt <- melt(tsv,id.vars = 'y',measure.vars = as.character(1:(ncol(tsv)-1)),
variable.name = 'x')
tsv_melt$x <- as.numeric(tsv_melt$x)
tsv_melt$ID <- row.names(tsv_melt)
tsv_melt$fill <- map_colors[tsv_melt$value]
tsv_melt$fill
map_colors
tsv_melt$fill[is.na(tsv_melt$fill)] <- 'black'
ggplot() + theme_bw() +
geom_tile(data = tsv_melt,
mapping = aes(x = x, y = -y,fill = shQuote(fill)),
color = 'black')
ggplot() + theme_bw() +
geom_tile(data = tsv_melt,
mapping = aes(x = x, y = -y,fill = fill),
color = 'black')
ggplot() + theme_bw() +
geom_tile(data = tsv_melt,
mapping = aes(x = x, y = -y,fill = fill),
color = 'black') +
geom_text(data = tsv_melt,
mapping = aes(x = x, y = -y, label = ID)) +
scale_fill_manual(values = fill)
ggplot(data = tsv_melt) + theme_bw() +
geom_tile(aes(x = x, y = -y,fill = fill), color = 'black') +
geom_text(aes(x = x, y = -y, label = ID)) +
scale_fill_manual(values = fill)
tsv_melt$fill
fill <- as.character(tsv_melt$fill)
names(fill) <- as.character(tsv_melt$ID)
ggplot(data = tsv_melt) + theme_bw() +
geom_tile(aes(x = x, y = -y,group = ID), color = 'black') +
geom_text(aes(x = x, y = -y, label = ID)) +
scale_fill_manual(values = fill)
ggplot(data = tsv_melt) + theme_bw() +
geom_tile(aes(x = x, y = -y,group = fill), color = 'black') +
geom_text(aes(x = x, y = -y, label = ID)) +
scale_fill_manual(values = fill)
ggplot(data = tsv_melt) + theme_bw() +
geom_tile(aes(x = x, y = -y,group = fill), color = 'black')
fname <- "../The Dungeon of Demonic Annihilation 01 (tsv).txt"
tsv <- read.csv(fname, sep = "\t", colClasses = "character")
tsv <- rbind("",tsv)
colnames(tsv) <- 1:ncol(tsv)
tsv$y <- 1:nrow(tsv)
tsv_melt <- melt(tsv,id.vars = 'y',measure.vars = as.character(1:(ncol(tsv)-1)),
variable.name = 'x')
tsv_melt$x <- as.numeric(tsv_melt$x)
tsv_melt$ID <- row.names(tsv_melt)
tsv_melt$fill <- map_colors[tsv_melt$value]
tsv_melt$fill[is.na(tsv_melt$fill)] <- 'black'
fill <- as.character(tsv_melt$fill)
names(fill) <- as.character(tsv_melt$ID)
fill
tsv_melt$x <- as.numeric(tsv_melt$x)
tsv_melt$ID <- row.names(tsv_melt)
tsv_melt$fill <- map_colors[tsv_melt$value]
tsv_melt$fill[is.na(tsv_melt$fill)] <- 'black'
fill <- as.character(tsv_melt$fill)
names(fill) <- as.character(tsv_melt$ID)
ggplot(data = tsv_melt) + theme_bw() +
geom_tile(aes(x = x, y = -y,fill = ID), color = 'black') +
geom_text(aes(x = x, y = -y, label = ID)) +
scale_fill_manual(values = fill)
ggplot(data = tsv_melt) + theme_bw() +
geom_tile(aes(x = x, y = -y,fill = ID), color = 'black')
ggplot(data = tsv_melt) + theme_bw() +
geom_tile(aes(x = x, y = -y,fill = factor(fill)), color = 'black')
ggplot(data = tsv_melt) + theme_bw() +
geom_tile(aes(x = x, y = -y,fill = value), color = 'black') +
geom_text(aes(x = x, y = -y, label = ID)) +
scale_fill_manual(values = map_colors, labels = map_labels, na.value = 'black')
tsv_melt$value
plot_viewable <- function(df,v,d) {
#' get neighbors based on position and distance viewable
viewable <- get_neighbors(g, v, d)
#' turn off all things that are not viewable
df$value[! (df$ID %in% viewable)] <- ""
ggplot(data = df) + theme_bw() +
geom_tile(aes(x = x, y = -y,fill = value), color = 'black') +
geom_text(aes(x = x, y = -y, label = ID)) +
scale_fill_manual(values = map_colors, labels = map_labels, na.value = 'black')
}
plot_viewable(tsv_melt, 51, 2)
plot_viewable(tsv_melt, '51', 2)
plot_viewable(tsv_melt, '80', 2)
ever_viewed <- c()
plot_viewable <- function(df,v,d) {
#' get neighbors based on position and distance viewable
currently_viewable <- get_neighbors(g, v, d)
ever_viewed <<- unique(ever_viewable, currently_viewable)
#' turn off all things that are not viewable
df$value[! (df$ID %in% ever_viewed)] <- ""
ggplot(data = df) + theme_bw() +
geom_tile(aes(x = x, y = -y,fill = value), color = 'black') +
geom_text(aes(x = x, y = -y, label = ID)) +
scale_fill_manual(values = map_colors, labels = map_labels, na.value = 'black')
}
plot_viewable(tsv_melt, '51', 2)
ever_viewed <- c()
plot_viewable <- function(df,v,d) {
#' get neighbors based on position and distance viewable
currently_viewable <- get_neighbors(g, v, d)
ever_viewed <<- unique(ever_viewed, currently_viewable)
#' turn off all things that are not viewable
df$value[! (df$ID %in% ever_viewed)] <- ""
ggplot(data = df) + theme_bw() +
geom_tile(aes(x = x, y = -y,fill = value), color = 'black') +
geom_text(aes(x = x, y = -y, label = ID)) +
scale_fill_manual(values = map_colors, labels = map_labels, na.value = 'black')
}
plot_viewable(tsv_melt, '51', 2)
ever_viewed
plot_viewable <- function(df,v,d) {
#' get neighbors based on position and distance viewable
currently_viewable <- get_neighbors(g, v, d)
ever_viewed <<- unique(ever_viewed, currently_viewable)
print(ever_viewed)
#' turn off all things that are not viewable
df$value[! (df$ID %in% ever_viewed)] <- ""
ggplot(data = df) + theme_bw() +
geom_tile(aes(x = x, y = -y,fill = value), color = 'black') +
geom_text(aes(x = x, y = -y, label = ID)) +
scale_fill_manual(values = map_colors, labels = map_labels, na.value = 'black')
}
plot_viewable(tsv_melt, '51', 2)
ever_viewed <- c()
plot_viewable <- function(df,v,d) {
#' get neighbors based on position and distance viewable
currently_viewable <- get_neighbors(g, v, d)
ever_viewed <<- unique(c(ever_viewed, currently_viewable))
#' turn off all things that are not viewable
df$value[! (df$ID %in% ever_viewed)] <- ""
ggplot(data = df) + theme_bw() +
geom_tile(aes(x = x, y = -y,fill = value), color = 'black') +
geom_text(aes(x = x, y = -y, label = ID)) +
scale_fill_manual(values = map_colors, labels = map_labels, na.value = 'black')
}
plot_viewable(tsv_melt, '51', 1)
plot_viewable(tsv_melt, '51', 2)
plot_viewable(tsv_melt, '109', 2)
plot_viewable(tsv_melt, '107', 2)
plot_viewable(tsv_melt, '105', 2)
plot_viewable(tsv_melt, '47', 2)
plot_viewable(tsv_melt, '45', 2)
plot_viewable(tsv_melt, '103', 2)
plot_viewable(tsv_melt, '101', 2)
plot_viewable(tsv_melt, '159', 2)
plot_viewable <- function(df,v,d) {
#' get neighbors based on position and distance viewable
currently_viewable <- get_neighbors(g, v, d)
ever_viewed <<- unique(c(ever_viewed, currently_viewable))
#' turn off all things that are not viewable
df$value[! (df$ID %in% ever_viewed)] <- ""
pt <- subset(df,ID == v)
ggplot(data = df) + theme_bw() +
geom_tile(aes(x = x, y = -y,fill = value), color = 'black') +
geom_text(aes(x = x, y = -y, label = ID)) +
geom_point(data = pt,
mapping = aes(x = x, y = -y), shape = 3, color = 'yellow') +
scale_fill_manual(values = map_colors, labels = map_labels, na.value = 'black')
}
plot_viewable(tsv_melt, '159', 2)
plot_viewable <- function(df,v,d) {
#' get neighbors based on position and distance viewable
currently_viewable <- get_neighbors(g, v, d)
ever_viewed <<- unique(c(ever_viewed, currently_viewable))
#' turn off all things that are not viewable
df$value[! (df$ID %in% ever_viewed)] <- ""
pt <- subset(df,ID == v)
ggplot(data = df) + theme_bw() +
geom_tile(aes(x = x, y = -y,fill = value), color = 'black') +
geom_text(aes(x = x, y = -y, label = ID)) +
geom_point(data = pt,
mapping = aes(x = x, y = -y),
shape = 23, size = 3, color = 'red', fill = 'yellow') +
scale_fill_manual(values = map_colors, labels = map_labels, na.value = 'black')
}
plot_viewable(tsv_melt, '159', 2)
plot_viewable <- function(df,v,d) {
#' get neighbors based on position and distance viewable
currently_viewable <- get_neighbors(g, v, d)
ever_viewed <<- unique(c(ever_viewed, currently_viewable))
#' turn off all things that are not viewable
df$value[! (df$ID %in% ever_viewed)] <- ""
pt <- subset(df,ID == v)
ggplot(data = df) + theme_bw() +
geom_tile(aes(x = x, y = -y,fill = value), color = 'black') +
geom_text(aes(x = x, y = -y, label = ID)) +
geom_point(data = pt,
mapping = aes(x = x, y = -y),
shape = 23, size = 5, color = 'red', fill = 'yellow') +
scale_fill_manual(values = map_colors, labels = map_labels, na.value = 'black')
}
plot_viewable(tsv_melt, '159', 2)
plot_viewable(tsv_melt, '101', 2)
ever_viewed <- tsv_melt$ID
plot_viewable(tsv_melt, '101', 2)
ever_viewed <- c()
plot_viewable <- function(df,v,d) {
#' get neighbors based on position and distance viewable
currently_viewable <- get_neighbors(g, v, d)
ever_viewed <<- unique(c(ever_viewed, currently_viewable))
#' turn off all things that are not viewable
df$value[! (df$ID %in% ever_viewed)] <- ""
pt <- subset(df,ID == v)
ggplot(data = df) + theme_bw() +
geom_tile(aes(x = x, y = -y,fill = value), color = 'black') +
geom_text(aes(x = x, y = -y, label = ID)) +
geom_point(data = pt,
mapping = aes(x = x, y = -y),
shape = 23, size = 5, color = 'red', fill = 'yellow') +
scale_fill_manual(values = map_colors, labels = map_labels, na.value = 'black')
}
plot_viewable(tsv_melt, '93', 2)
plot_viewable(tsv_melt, '93', 2)
plot_viewable(tsv_melt, '151', 2)
plot_viewable(tsv_melt, '149', 2)
plot_viewable(tsv_melt, '33', 2)
plot_viewable(tsv_melt, '148', 2)
plot_viewable(tsv_melt, '207', 2)
plot_viewable(tsv_melt, '265', 2)
plot_viewable(tsv_melt, '267', 2)
plot_viewable(tsv_melt, '269', 2)
plot_viewable(tsv_melt, '327', 2)
ever_viewed <- tsv_melt$ID
plot_viewable(tsv_melt, '327', 2)
ever_viewed <- c()
plot_viewable <- function(df,v,d) {
#' get neighbors based on position and distance viewable
currently_viewable <- get_neighbors(g, v, d)
ever_viewed <<- unique(c(ever_viewed, currently_viewable))
#' turn off all things that are not viewable
df$value[! (df$ID %in% ever_viewed)] <- ""
pt <- subset(df,ID == v)
ggplot(data = df) + theme_bw() +
geom_tile(aes(x = x, y = -y,fill = value), color = 'black') +
geom_text(aes(x = x, y = -y, label = ID)) +
geom_point(data = pt,
mapping = aes(x = x, y = -y),
shape = 23, size = 5, color = 'red', fill = 'yellow') +
scale_fill_manual(values = map_colors, labels = map_labels, na.value = 'black')
}
plot_viewable(tsv_melt, '93', 2)
plot_viewable(tsv_melt, '127', 2)
ever_viewed <- c()
plot_viewable <- function(df,v,d) {
#' get neighbors based on position and distance viewable
currently_viewable <- get_neighbors(g, v, d)
ever_viewed <<- unique(c(ever_viewed, currently_viewable))
#' turn off all things that are not viewable
df$value[! (df$ID %in% ever_viewed)] <- ""
pt <- subset(df,ID == v)
ggplot(data = df) + theme_bw() +
geom_tile(aes(x = x, y = -y,fill = value), color = 'black') +
geom_text(aes(x = x, y = -y, label = ID)) +
geom_point(data = pt,
mapping = aes(x = x, y = -y),
shape = 23, size = 5, color = 'red', fill = 'yellow') +
scale_fill_manual(values = map_colors, labels = map_labels, na.value = 'black')
}
plot_viewable(tsv_melt, '93', 2)
plot_viewable(tsv_melt, '122', 2)
plot_viewable(tsv_melt, '150', 2)
plot_viewable(tsv_melt, '178', 2)
ever_viewed <- tsv_melt$ID
plot_viewable(tsv_melt, '93', 2)
